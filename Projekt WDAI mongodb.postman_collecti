{
	"info": {
		"_postman_id": "0f3ee9aa-a961-4768-82ec-054a05757602",
		"name": "Projekt WDAI mongodb",
		"description": "# ðŸš€ How to use our POSTMAN file\n\nThis template guides you through our CRUD operations (GET, POST, PUT, DELETE), variables, authorization JWT tokens.\n\n# ðŸ’»Template made by Mateusz Nowak, Szymon Balicki.\n\nHow to use our POSTMAN file\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send register/login requests**\n\nIf you want to register a new user, replace data provided in register request body. You can also use already existing user with data provided in login (we reccomend it to not-so-experienced users). You will get a JWT token. Please save it, so you can use other requests.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: Try other requests**\n\nIf the request uses authorization, replace Bearer Token with one provided in login request. Observe the response tab for status code (200 OK), response time, and size. If there is data in body you can use it or replace with your own one.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST and PATCH request.\n\n``` json\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39990053"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"adminemail\",\n  \"password\": \"password123\",\n  \"role\": \"admin\"\n}\n\n// {\n//     \"email\": \"useremail\",\n//     \"password\": \"password123\"\n// }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"register"
					]
				},
				"description": "This is a POST Register request, submitting data to an API via the request body. This request submits JSON data: user email and password labeled as: \"email\", \"password\". It can also contain \"role\": \"admin\" if the user is registered to be an admin in the database.\n\nA successful POST Register request returns a `201 Created`, unsuccessful one returns `400 Bad request` with and message \"Username already exists\" (when email has already registered account), or \"Emal and password are required\" (when there is no data labeled as \"email\" and \"password\" in body). A `500 Internal Server Error` occurs in case of a database issue."
			},
			"response": []
		},
		{
			"name": "Login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// {\r\n//   \"email\": \"adminemail\",\r\n//   \"password\": \"password123\"\r\n// }\r\n\r\n{\r\n    \"email\": \"useremail\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"login"
					]
				},
				"description": "This is a POST Login request, submitting data to an API via the request body. This request submit JSON data with \"email\" and \"password\" of already existing (in our database) user.\n\nA successful POST Login request returns a `200 OK`, an unsuccessful POST Login (with an email in body, that is not yet registered or wrong password provided) returns `400 Bad Request`, with a message \"Invalid credentials\"."
			},
			"response": []
		},
		{
			"name": "Get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3002/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3002",
					"path": [
						"products"
					]
				},
				"description": "This is a GET All products request. It returns every product avaidable in database.\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get specific product from id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": \"677bd54f7a760c6a8f10ddef\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3002/products/oneproduct",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3002",
					"path": [
						"products",
						"oneproduct"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Chceck if product exists",
			"request": {
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "http://localhost:3002/products/{{productId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3002",
					"path": [
						"products",
						"{{productId}}"
					]
				},
				"description": "This HEAD product request checks if the product with Id provided in body exists in our database.\n\nA successful HEAD returns `200 OK` status without any message, a failed one (when the product is not found) returns `404 Not found` with a message \"Product not found\"."
			},
			"response": []
		},
		{
			"name": "Add product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjI5MTg5MywiZXhwIjoxNzM2Mjk1NDkzfQ.fNVZ3Vjqy-1-mBD1Ew0ptOnEl1BP_bf4iQWKN4u6Z_s",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\n    \"id\": 20,\n    \"title\": \"T-shirt for men\",\n    \"price\": 12.99,\n    \"description\": \"95%Cotton,5%Spandex, Features: Casual, Short Sleeve, Letter Print,V-Neck,Fashion Tees, The fabric is soft and has some stretch., Occasion: Casual/Office/Beach/School/Home/Street. Season: Spring,Summer,Autumn,Winter.\",\n    \"category\": \"women's clothing\",\n    \"image\": \"https://fakestoreapi.com/img/61pHAEJ4NML._AC_UX679_.jpg\",\n    \"rating\": {\n      \"rate\": 3.6,\n      \"count\": 145\n    }\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3002/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3002",
					"path": [
						"products"
					]
				},
				"description": "This is a POST Add product request. It requires users to have a authorization Bearer Token (JWT Token provded by POST Login request). It also requires specific data in body (title, price, description, category, image. It sets new rating and number of ratings of this product to 0 by default.\n\nA successful POST request returns a `201 Created` response code it may also return `401 Unauthorized` response, when Bearer token is not right."
			},
			"response": []
		},
		{
			"name": "Delete product on id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjI5MTg5MywiZXhwIjoxNzM2Mjk1NDkzfQ.fNVZ3Vjqy-1-mBD1Ew0ptOnEl1BP_bf4iQWKN4u6Z_s",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": \"677dba478d98ba0c99961ef9\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3002/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3002",
					"path": [
						"products"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get orders from user id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjcxNzk1NSwiZXhwIjoxNzM2NzIxNTU1fQ.K6RfKgk_NVHVjZ7NDvP_xpMYrmp_PAZG1QOleIjVabc",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3003/orders/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3003",
					"path": [
						"orders",
						"{{userId}}"
					]
				},
				"description": "This is a GET request to fetch all orders for the authenticated user. It returns a list of orders with their associated products and quantities. It requires an JWT Bearer Token in order to get userId and add this order to this user.\n\nA successful request returns a 200 OK response. A 401 Unauthorized status is returned if authentication fails, and a 500 Internal Server Error occurs in case of a database or service issue.EndFragment"
			},
			"response": []
		},
		{
			"name": "Add order to this user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ODNkNDQ5YTcwMWE1NjI2ZTdiMTUyNSIsImlhdCI6MTczNjcyMTMwMywiZXhwIjoxNzM2NzI0OTAzfQ.QAhum3yvuPkD0Hgu7HBL_3SC3JWjHQapFuDbYO7cI_Q",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"products\": [\n      {\n        \"productId\": \"677bd54f7a760c6a8f10ddef\",\n        \"quantity\": 4\n      },\n      {\n        \"productId\": \"677d519d70589abc2278cf34\",\n        \"quantity\": 1\n      },\n      {\n        \"productId\": \"677d519570589abc2278cf32\",\n        \"quantity\": 6\n      }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3003/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3003",
					"path": [
						"orders"
					]
				},
				"description": "StartFragmentThis is a POST request to create a new order. It requires a JWT Bearer Token for authentication and a list of products (with their IDs and quantities) in the request body. The system checks if the products exist in the product service.\n\nA successful request returns a `201 Created` response with the order details. A `400 Bad Request` status is returned if the product data is invalid, a `404 Not Found` if a product doesn't exist, and a `500 Internal Server Error` for any other issues."
			},
			"response": []
		},
		{
			"name": "Patch order by id",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjI5MTg5MywiZXhwIjoxNzM2Mjk1NDkzfQ.fNVZ3Vjqy-1-mBD1Ew0ptOnEl1BP_bf4iQWKN4u6Z_s",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"orderId\": \"677db7a246f98e675be37eaa\",\r\n    \"products\": [\r\n      {\r\n        \"productId\": \"677d51ae70589abc2278cf38\",\r\n        \"quantity\": 2\r\n      },\r\n      {\r\n        \"productId\": \"677d519d70589abc2278cf34\",\r\n        \"quantity\": 1\r\n      },\r\n      {\r\n        \"productId\": \"677d519570589abc2278cf32\",\r\n        \"quantity\": 37\r\n      }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3003/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3003",
					"path": [
						"orders"
					]
				},
				"description": "This is a PATCH request to update an existing order. It requires a Bearer Token (JWT) for authentication and the order ID with a list of products to update. The system checks if the user is authorized to modify the order (if he is an admin or the user that made this order).\n\nA successful request returns a `200 OK` status with a success message. A `400 Bad Request` is returned if the product data is invalid, a 404 Not Found if the order is not found, a `403 Forbidden` if the user is unauthorized, and a `500 Internal Server Error` for any other issues."
			},
			"response": []
		},
		{
			"name": "Delete order from id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjI5MTg5MywiZXhwIjoxNzM2Mjk1NDkzfQ.fNVZ3Vjqy-1-mBD1Ew0ptOnEl1BP_bf4iQWKN4u6Z_s",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"orderId\": \"677db7a246f98e675be37eaa\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3003/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3003",
					"path": [
						"orders"
					]
				},
				"description": "This is a DELETE request to remove an order. It requires a Bearer Token (JWT) for authentication (if the user made this order) and the order ID in the request body.\n\nA successful request returns a `200 OK` response with a confirmation message. A `404 Not Found` is returned if the order is not found, and a `500 Internal Server Error` occurs in case of database or other issues."
			},
			"response": []
		},
		{
			"name": "Get ratings for specific product",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": \"677d51ae70589abc2278cf38\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3004/ratings",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3004",
					"path": [
						"ratings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add rating to this user",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjI5MTg5MywiZXhwIjoxNzM2Mjk1NDkzfQ.fNVZ3Vjqy-1-mBD1Ew0ptOnEl1BP_bf4iQWKN4u6Z_s",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"productId\": \"677d51ae70589abc2278cf38\",\r\n    \"rate\": 4.5,\r\n    \"description\": \"Really good. It has some flaws like poor packaging.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3004/ratings",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3004",
					"path": [
						"ratings"
					]
				},
				"description": "This is a POST request to create a new rating for a product. It requires a Bearer Token (JWT) for authentication and userId and product data (productId, rate, description, date) in the request body. It checks if the product exists and if the user has already rated the product (user is allowe to rate each product only once).\n\nA successful request returns a `201 Created` response with the rating ID. A `404 Not Found` is returned if the product does not exist, a `409 Conflict` if the user has already rated the product, a `500 Internal Server Error` for other issues."
			},
			"response": []
		},
		{
			"name": "Delete rating by ratingId",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ODNkNDQ5YTcwMWE1NjI2ZTdiMTUyNSIsImlhdCI6MTczNjcwNDg3NSwiZXhwIjoxNzM2NzA4NDc1fQ.VutOFDdQ2oDU2X2kjY7Iaom_CoOKT1NfZVtGxaSsdh8",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"6784037579a98cc3c5d37e15\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3004/ratings",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3004",
					"path": [
						"ratings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch rating by ratingId",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjI5MTg5MywiZXhwIjoxNzM2Mjk1NDkzfQ.fNVZ3Vjqy-1-mBD1Ew0ptOnEl1BP_bf4iQWKN4u6Z_s",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"677db6c6ad93c8d46fad9454\",\r\n    \"rate\": 2.5,\r\n    \"description\": \"Changed my mind. It broke after one (1!!) week.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3004/ratings",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3004",
					"path": [
						"ratings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user cart",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjcyNDUwMSwiZXhwIjoxNzM2NzI4MTAxfQ.4ZDBCsgj7y9KP6YDhQ7jC0jhM541pMUKEjqEWWSBOHk",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3005/cart/{{:userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"cart",
						"{{:userId}}"
					]
				},
				"description": "This is a GET request to retrieve the cart for a specific user. It requires the user ID as a parameter.\n\nA successful request returns a `200 OK` response with the cart's detailed product data (including quantity). If no cart exists for the user, it returns an empty cart. A `500 Internal Server Error` is returned for any server or database issues."
			},
			"response": []
		},
		{
			"name": "Add product to cart",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjYzMzExNCwiZXhwIjoxNzM2NjM2NzE0fQ.TATddjd7fU3SVhJBYxi5aQX9XYXOAxJ6EqbmkuAfsHc",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n    //   {\r\n    //     \"productId\": \"677d51ae70589abc2278cf38\",\r\n    //     \"quantity\": 4\r\n    //   }\r\n    //   {\r\n    //     \"productId\": \"677bd54f7a760c6a8f10ddef\",\r\n    //     \"quantity\": 1\r\n    //   }\r\n      {\r\n        \"productId\": \"677d519570589abc2278cf32\",\r\n        \"quantity\": 6\r\n      }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3005/cart",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"cart"
					]
				},
				"description": "This is a POST request to add a product to the user's cart. It requires a Bearer Token (JWT) for authentication and product data (productId, quantity). It checks if the product exists and if the provided quantity is valid.\n\nA successful request returns a `200 OK` response with a confirmation message. A `400 Bad Request` occurs if product data is invalid, a `404 Not Found` if the product does not exist, and a `500 Internal Server Error` for any server-related issues."
			},
			"response": []
		},
		{
			"name": "Delete product from cart",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjU1NDI1NiwiZXhwIjoxNzM2NTU3ODU2fQ.Nq-ujy3JQvaJyigvXoEMp1rNhCZPlbImxq9R2G_qk68",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n        \"productId\": \"677d519570589abc2278cf32\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3005/cart/{{:userId}}/{{:productId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"cart",
						"{{:userId}}",
						"{{:productId}}"
					]
				},
				"description": "This is a DELETE request to remove a specific product from the user's cart. It requires the user ID and product ID as parameters.\n\nA successful request returns a `200 OK` response confirming the removal. If the cart or the product is not found, it returns a `404 Not Found`. A `500 Internal Server Error` occurs if there is a problem processing the request."
			},
			"response": []
		},
		{
			"name": "Delete product from cart Copy",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3N2JkNDczOTU3YzljNmRlZDUyZGRiYiIsImlhdCI6MTczNjcyNDUwMSwiZXhwIjoxNzM2NzI4MTAxfQ.4ZDBCsgj7y9KP6YDhQ7jC0jhM541pMUKEjqEWWSBOHk",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3005/carts/clear/{{:userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3005",
					"path": [
						"carts",
						"clear",
						"{{:userId}}"
					]
				},
				"description": "This is a DELETE request to remove a specific product from the user's cart. It requires the user ID and product ID as parameters.\n\nA successful request returns a `200 OK` response confirming the removal. If the cart or the product is not found, it returns a `404 Not Found`. A `500 Internal Server Error` occurs if there is a problem processing the request."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "order_id",
			"value": "3",
			"type": "default"
		},
		{
			"key": "product_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "productId",
			"value": "",
			"type": "default"
		},
		{
			"key": "userId",
			"value": "",
			"type": "default"
		},
		{
			"key": "ratingId",
			"value": "",
			"type": "default"
		}
	]
}